FROM apache/airflow:3.0.3

USER root

# Install system dependencies including Java and Git
RUN apt update && \
    apt-get install -y default-jdk \
                       ant \
                       git \
                       curl \
                       wget && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set JAVA_HOME environment variable
ENV JAVA_HOME=/usr/lib/jvm/default-java/
ENV PATH=$PATH:$JAVA_HOME/bin

# Verify Java installation
RUN java -version && echo "JAVA_HOME is set to: $JAVA_HOME"

# Create directories for repositories and Spark artifacts
RUN mkdir -p /opt/airflow/dags /opt/airflow/plugins /opt/airflow/artifacts && \
    chmod 755 /opt/airflow/artifacts && \
    chown airflow:root /opt/airflow/artifacts

# Switch back to airflow user
USER airflow

# Set working directory
WORKDIR /opt/airflow

# Copy requirements file if it exists
COPY requirements.txt* ./

# Install Python dependencies
RUN if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

# Copy any local files (optional)
COPY --chown=airflow:root . .

# Clone repositories at runtime (will be handled by entrypoint script)
# DAGs repository will be cloned to /opt/airflow/dags
# Plugins repository will be cloned to /opt/airflow/plugins

# Copy and modify the original entrypoint
USER root
COPY --from=apache/airflow:3.0.3 /entrypoint /entrypoint-original

# Create enhanced entrypoint script
RUN cat > /entrypoint-custom.sh << 'EOF'
#!/bin/bash

# Set proper environment for Airflow and Java
export JAVA_HOME="/usr/lib/jvm/default-java/"
export PATH="/home/airflow/.local/bin:$PATH:$JAVA_HOME/bin"

# Function to clone or update repository
clone_or_update_repo() {
    local repo_url=$1
    local target_dir=$2
    local repo_name=$(basename "$repo_url" .git)
    
    echo "Processing repository: $repo_url -> $target_dir"
    
    # Check if directory contains files (indicating it's mounted or in use)
    if [ "$(ls -A "$target_dir" 2>/dev/null)" ]; then
        echo "Directory $target_dir contains files (likely mounted), skipping Git clone"
        return
    fi
    
    if [ -d "$target_dir/.git" ]; then
        echo "Repository exists, updating..."
        cd "$target_dir" && (git pull origin main || echo "Git pull failed")
    else
        echo "Cloning repository..."
        (git clone "$repo_url" "$target_dir" || echo "Git clone failed")
    fi
    
    # Ensure airflow user owns the files
    if [ -d "$target_dir" ]; then
        chown -R airflow:root "$target_dir"
    fi
}

# Only run git operations if running as root
if [ "$(id -u)" = "0" ] && [ -n "${DAGS_REPO_URL:-}${PLUGINS_REPO_URL:-}" ]; then
    echo "Running as root, processing Git repositories..."
    
    if [ -n "${DAGS_REPO_URL:-}" ]; then
        clone_or_update_repo "$DAGS_REPO_URL" "/opt/airflow/dags"
    fi

    if [ -n "${PLUGINS_REPO_URL:-}" ]; then
        clone_or_update_repo "$PLUGINS_REPO_URL" "/opt/airflow/plugins"
    fi
fi

# Execute the original airflow entrypoint
exec /entrypoint-original "$@"
EOF

RUN chmod +x /entrypoint-custom.sh

USER airflow

# Use custom entrypoint
ENTRYPOINT ["/entrypoint-custom.sh"]
CMD ["webserver"]